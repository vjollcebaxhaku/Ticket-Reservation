// controllers/ticketControllers.js
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// GET all tickets
const getTickets = async (req, res) => {
    try {
        const tickets = await prisma.ticket.findMany();
        res.json(tickets);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// POST create a new ticket
const createTicket = async (req, res) => {
    const { name, price, userId, type } = req.body;
    try {
        const newTicket = await prisma.ticket.create({
            data: {
                name,
                price,
                userId: parseInt(userId),
                type
            }
        });
        res.status(201).json(newTicket);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// GET a single ticket by ID
const getTicketById = async (req, res) => {
    const { id } = req.params;
    try {
        const ticket = await prisma.ticket.findUnique({
            where: {
                id: parseInt(id)
            }
        });
        if (!ticket) {
            res.status(404).json({ error: "Ticket not found" });
            return;
        }
        res.json(ticket);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// PUT update a ticket by ID
const updateTicket = async (req, res) => {
    const { id } = req.params;
    const { name, price, userId, type } = req.body;
    try {
        const updatedTicket = await prisma.ticket.update({
            where: {
                id: parseInt(id)
            },
            data: {
                name,
                price,
                userId: parseInt(userId),
                type
            }
        });
        res.json(updatedTicket);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// DELETE a ticket by ID
const deleteTicket = async (req, res) => {
    const { id } = req.params;
    try {
        await prisma.ticket.delete({
            where: {
                id: parseInt(id)
            }
        });
        res.json({ message: "Ticket deleted successfully" });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

module.exports = { getTickets, createTicket, getTicketById, updateTicket, deleteTicket };
